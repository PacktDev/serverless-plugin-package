version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

commands:
  run-tests:
    steps:
      - run:
          name: Create Report directories
          command: |
              mkdir -p test-results/ava
              mkdir -p test-results/eslint
      - run:
          name: Lint
          command: npm run ci:lint --silent > test-results/eslint/results.xml
      - run:
          name: Test
          command: npm run ci:test --silent > test-results/ava/results.xml
      - run:
          name: Coverage
          command: |
              npm run ci:coverage-report --silent
              npm run ci:coverage-check --silent
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: coverage
      - codecov/upload:
          file: coverage/coverage-final.json
  build:
    steps:
      - run:
          name: Build Package
          command: npm run build
  persist:
    steps:
      - persist_to_workspace:
          root: ~/repo
          paths: .
  restore:
    steps:
      - attach_workspace:
          at: ~/repo
  npm-install:
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
          name: Restore cache
      - run:
          command: 'npm ci '
          name: Install
      - save_cache:
          key: cache-{{ arch }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
          name: Save cache
          paths:
            - ~/.npm
  npm-publish:
    steps:
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
      - run:
          name: Publish a npm module on version bump
          command: |
            readonly package_name=$(node -p "require('./package.json').name")
            readonly version=$(node -p "require('./package.json').version")
            readonly latest_published_version=$(npm v ${package_name} version 2>/dev/null)

            if [[ $(npx semver ${version}) == "" ]]; then
              echo "`version` in package.json is not semver."
              exit 0
            fi

            readonly versions=$(npx semver ${latest_published_version} ${version})
            readonly first=$(echo ${versions} | cut -d ' ' -f 1)
            if [[ "$version" != "$latest_published_version" ]] && [[ "$first" = "$latest_published_version" ]]; then
              npm publish --access=public

            else
              echo "${version} exists. Publish Skipped"
            fi

executors:
  nodejs:
    docker:
      - image: 'circleci/node:10.16.0'

jobs:
  test:
    working_directory: ~/repo
    executor: nodejs
    steps:
      - checkout
      - npm-install
      - run-tests
      - persist
  build:
    working_directory: ~/repo
    executor: nodejs
    steps:
      - restore
      - build
      - persist
  publish:
    working_directory: ~/repo
    executor: nodejs
    steps:
      - restore
      - npm-publish

workflows:
  publish:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            tags:
              only: /.*/
      - publish:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
